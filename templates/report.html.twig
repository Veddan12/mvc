{% extends "base.html.twig" %}

{% block title %}Report{% endblock %}

{% block body %}
    <div class="title">
        <h1>Report</h1>   
    </div>
    <div class="two-column-content">
        <div class="report-content">
            <h2 id="Kmom01">Kmom01</h2>
            <p>Jag har grundläggande förståelse för objektorienterad programmering och har tidigare använt OOP-koncept i OO Python kursen. Jag är bekant med begrepp som klasser, objekt, arv, inkapsling och polymorfism.</p>
            <p>I PHP definieras klasser med nyckelordet class, och objekt skapas från dessa klasser med nyckelordet new. För att komma igång och skapa sina första klasser behöver man förstå grundläggande koncept såsom egenskaper (properties) och metoder (methods). Egenskaper representerar just egenskaperna hos ett objekt, medan metoder definierar beteendet eller alltså funktioner. Vidare behöver man förstå hur man instansierar objekt från klasser och hur man använder dessa objekt i sin kod för att utföra olika åtgärder eller uppgifter.</p>
            <p>Kodbasen och strukturen för uppgiften verkar vara omfattande och det blir mycket att hålla reda på. Det tror jag blir bra på långt håll när man har många routes och behöver en tydlig struktur, men just nu även då det är tydligt vad som skapar router och vad som är tamplate så måste man ändå tänka noga var exakt man ska placera olika delar av koden. I nästa kursmoment tänker jag testa att använda mig av Markdown såsom vi gjorde i Design-kursen, just nu känns det att för mycket html-kod hamnar i twig-filer. Det som också var lite svårt att hålla reda på är hantering av bilden. Jag lyckades få det som jag ville, men det var ganska petigt. Finns säkert några enkla knep som jag måste utforska framöver.</p>
            <p>Artikeln "PHP The Right Way" är en superbra resurs för PHP-utvecklare. Den är en väldigt omfattande guide till bästa praxis och moderna sätt för att skriva ett riktigt kvalitativ PHP-kod. Jag har bläddrat igenom olika delar och just nu det som jag mest fokuserade på är delen om templates, för att vi har börjat jobba med att skapa olika views i denna kursmoment.</p>
            <p>Under kmom01 har jag lärt mig mer om användningen av objektorienterade koncept i PHP och hur den tillämpas i ramverket Symfony. Jag har jobbat mycket med twig templates och har lärt mig skapa routes i controller.</p>
            <h2 id="Kmom02">Kmom02</h2>
            <p>Arv tillåter en klass att ärva egenskaper och metoder från en annan klass, t.ex. parent class och child class. På så sätt kan man återanvända sin kod och strukturera upp koden genom att skapa hierarkier av klasser.</p>
            <p>Komposition betyder att en klass innehåller instanser av andra klasser. Man kan då kombinera funktionalitet från olika klasser.</p>
            <p>Interface är en uppsättning av metoder som en klass kan implementera.</p>
            <p>Trait är ett sätt att återanvända kod i flera klasser genom att inkludera en uppsättning metoder i klasser.</p>
            <p>När jag jobbade med uppgifter använde jag mig mycket av DiceGame övningen. Jag konstruerade kortleken på ungefär samma sätt, med Card och Deck klasser. Uppgiften kändes för omfattande och då försökte jag skriva så enkla lösningar som möjligt utan att komplicera det för att det är säkert så att man kan ha gjort annorlunda och bättre, men jag är ganska nöjd med hur jag fixade till allting. Json med get/post var speciellt uppmanande, jag fick debugga mycket och därav kanske inte haft tid att pyssla till med detaljer. Eftersom det var förmycker redan lät jag bli att testa Markdown.</p>
            <p>Att få jobba i Symfony och enligt MVC ger mig större förståelse för modulärt kodskrivning, då man strukturerar upp koden och då blir det lättare att överse vilken del ansvarar för vilken “funktion” och det blir lättare att felsöka, men också mycket av koden kan återanvändas.</p>
            <p>TIL för kmom02 är att jag fick lära mig mycket om arv/komposition, men att få lära sig jobba med sessions var en stor upptäckt för mig, jätteroligt.</p>
            <h2 id="Kmom03">Kmom03</h2>
            <p>Till en början var jag lite osäker på hur detta kommer kunna vara till min hjälp då jag brukar inte tänka på schema/flöde -skissar innan jag sätter igång så att säga. Själva processen tog lite tid därför och jag försökte tänka på hur det skulle se ut för någon som inte “pratar” programmeringsspråk. Men när det var på plats har det visat sig vara mycket värdefullt och jag kom tillbaka till både flödesschemat och pseudokoden under tiden jag jobbade med spelet. Det hjälpte mig identifiera vilka delar behöver hanteras, i vilken turordning, hur man ska tänka kring poängberäkning och liknande.</p>
            <p>Jag hade klasser såsom Card och Deck exempelvis så det fanns redan en baskod som jag kunde återanvända, samt en välutvecklad route for CardGame så jag tittade där för att se hur jag hanterade sessions och liknande. Först hade jag en idé om att ha klasser Player och Bank men under tiden jag utvecklade klassen Game21, som innehåller själva spelets logik, kom jag på att jag faktiskt kan använda CardHand och ha player och bank som objektvariabler.</p>
            <p>Överlag är jag nöjd med strukturen, jag försökte, enligt kravet, ha lite kod i routes och hantera allt i själva klasser, vilket jag tycker jag lyckades ganska bra med. Det har hjälpt mig att tänka mer på ren kod och att inte komplicera saker i onödan. Övningen med php-linters var också väldigt värdefull. Tidigare har fokus mest legat på att få allt att fungera, men nu börjar jag även tänka mer på kodkvalitet och struktur – ett steg framåt.</p>
            <p>Jag börjar känna mig bekväm med Symfony nu. Ramverket hjälper hålla koden ren och organiserad och det är mycket enklare att utveckla en app då man egentligen jobbar med endast få antal filer.  Samtidigt finns en tydlig struktur och förståelse för vilket ansvar varje fil har i appen, exempelvis hantering av routes, controllers och templates.</p>
            <p>TIL för kmom03 är code linting. Jag har lärt mig använda olika verktyg för att kontrollera och testa min kod för att kunna skriva “snyggare” och förbättra kvaliteten. Jag lärde mig mycket under tiden jag försökte fixa alla fel. Det var smidigt att köra alla verktyg samtidigt med ett script i composer.</p>
        </div>
        <div class="side-bar">
            <ul>
                <li><a href="#Kmom01">Kmom01</a></li>
                <li><a href="#Kmom02">Kmom02</a></li>
                <li><a href="#Kmom03">Kmom03</a></li>
                <li><a href="#Kmom04">Kmom04</a></li>
                <li><a href="#Kmom05">Kmom05</a></li>
                <li><a href="#Kmom06">Kmom06</a></li>
                <li><a href="#Kmom10">Kmom10</a></li>
            </ul>
        </div>
    </div>
{% endblock %}
